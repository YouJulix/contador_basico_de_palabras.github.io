 El Paradigma Orientado a Objetos surge a finales de los 60's con la intención de que las personas desarrollen código de acuerdo a un modelo consistente y que el mismo código sirva más adelante para utilizarlo de nuevo por los mismos programadores o por programadores externos, función extremadamente útil ya que los proyectos de software en general se hacen en equipo.

La POO (Programación Orientada a Objetos) es una forma de analizar el mundo y llevar el modelo de un sistema a la programación, en donde los elementos del programa se agrupan en entidades conocidas como objetos, los cuales guardan un estado y tienen un comportamiento especifico, dichos objetos mantienen contacto a través de mensajes (que en la programación se conocen como métodos). Dicho lenguaje utiliza una herramienta importante conocida como abstracción de datos, que es básicamente el ocultamiento de detalles de la implementación de los objetos.
La programación orientada a objetos nació a inicios de los 60's gracias al lenguaje Simula 67, aquel lenguaje fue base de Alan Kay para diseñar Smalltalk el primer lenguaje puro de POO, desde entonces éste ha tenido adaptaciones a otros lenguajes.

El Paradigma Orientado a Objetos tuvo auge cuando se desarrolla Smalltalk, se dice que Smalltalk es un lenguaje puro de programación orientada a objetos. Smalltalk implementa las características de dicha programación:

Características


1. Todo son objetos.
2. Los objetos funcionan haciéndose peticiones de uno a otro mediante paso de mensajes.
3. Cada objeto tiene su propia memoria, que consta de otros objetos.
4. Cada objeto es un ejemplar (instancia) de una clase. Una clase agrupa objetos similares.
5. La clase es el repositorio del comportamiento asociado con un objeto.
6. Las clases están organizadas en una estructura arbórea que se denomina jerarquía de herencia

Dentro de cada una de estas características se encuentran los elementos de dicho paradigma, a continuación se detallan:

    Objetos: No es más que un elemento abstracto con un estado y un comportamiento determinado, que representa un objeto de la vida real.
    Mensajes: Las acciones que se desarrollen dentro de POO serán la respuesta a las peticiones (mensajes) que se le hagan a los objetos.
    Diseño recursivo: Un programa puede constar de una estructura que se integre de objetos (todos con tareas específicas), que contengan mini-estructuras que a la vez sean objetos.
    Clases: Es el prototipo que se usará para instanciar(crear) nuestros objetos, ya que dentro de ella estará el estado inicial y el comportamiento que tendrá los objetos de esa clase.
    Herencia: Es una forma de estructurar los objetos en forma de jerarquía, la cual resulta muy útil ya que se pueden heredar estado y comportamiento de las superclases

A finales de los 60's cuando se dio el auge de INTERNET, se vino la famosa “crisis del software”, situación por la que se pasó y que orillo a las personas a desarrollar metodologías/paradigmas que dieran un diseño ordenado a los programas, se creó la programación estructurada (procedular) antes que el orientado a objetos, sin embargo, el paradigma orientado a objetos, tuvo más impacto ya que se hizo más fácil analizar el mundo de acuerdo a este paradigma; ya que es ver al mundo representado como una metáfora (hay quienes opinan que va más allá de eso), sin embargo, es fácil voltear a nuestro alrededor y ver que estamos rodeados de objetos, que tienen ciertas características y que interactúan con otros objetos, de ellos se pueden abstraer características esenciales, este es el modelo que trata de seguir la POO. El Paradigma va de la mano con la Ingeniería de Software.

Dentro de las características que lo llevaron a ser tan utilizado están: La modelación con objetos hace menos complicado la replicación de un modelo a gran escala.

La abstracción se hace a base de metáforas, y las metáforas son ocupadas por la gente de manera natural (o al menos son fáciles entenderlas). Al tener características estándar se crearon un amplio número de herramientas (IDEs, librería, etc.) para cualquier ámbito.

Para efectuar el paradigma orientado a objetos se necesita lenguajes que lo soporten, el primer lenguaje en implementar parcialmente el paradigma fue Simula 67, creado por Krinsten Nygaard y Ole-Johan Dahl, en el centro de cálculo noruego; Dicho lenguaje se asemejaba a los actuales, pero no era igual, no tenía bien definido el paradigma. Hacia inicios de los 70's Xerox desarrolla en Palo Alto Smalltalk (Alan Kay contribuye a esto), es considerado el primer lenguaje puro orientado a objetos, que solo utiliza clases y objetos. Este lenguaje fue muy agradable para los programadores; 10 años después se amplia C, para que soporte la POO y se crea C++.

C++ se vuelve la base para la creación de Java (1990). Java ya no es considerado un lenguaje puro orientado a objetos, ya que usa tipos de datos primitivos, o bien los Wrappers que son clases que encapsulan tipos de datos primitivos. Hubo una serie de cambios y fueron surgiendo nuevos lenguajes derivados de los anteriores, se desarrollaron lenguajes multiparadigmas, los cuales también dejan de ser puros para la programación orientada a objetos.

Se creó entonces la diferenciación de lenguajes puros e hibridos (multiparadigma).
Entre los lenguajes puros para la POO destacan: Smalltalk, Eiffel.
De los lenguajes hibridos que soportan la POO destacan: C++, Object Pascal, Java, C#, Objective-C, PHP, Python, Ruby, Ada, Lisp.

Analizando el POO encontramos que ha traído bastantes ventajas y pocas desventajas respecto a la programación estructurada (otra razón para que siga siendo tan utilizado)

Ventajas

    Ofrece una forma estándar de programar para que cuando se creen módulos estos sean entendidos por diferentes programadores.
    El modelado se hace más consistente y facilita el detectar errores más rápido que en la programación estructurada.
    Los análisis que se hacen para la POO se tratan como analogías del mundo real (Es relativamente sencillo para las personas).
    Al usar la abstracción y creación de objetos, se hace fácil mudar algunos objetos a otros programas para resolver problemas similares, a diferencia de la programación estructurada en donde se tiene que codificar de nuevo la mayoría de las cosas.
    El paradigma va más allá de una forma de programar, ya que facilita modelar un sistema sin pensar directamente en variables, estructuras de control, etc.
    Como el paradigma nos ofrece una manera de ver el problema sin preocuparnos en el flujo de datos se facilita la comunicación entre programadores con los clientes y demás desarrolladores.

Desventajas

En general no se encuentran desventajas a la POO, pero en algunos casos puede resultar inconveniente el hecho de que:

    Cuando se usa polimorfismo y ocupamos muchos métodos con el mismo nombre, al tratar de leer un código se hace complicado; debemos tener cuidado cuando analizamos llamada a las funciones ya que intervienen los parámetros para decidir cual función es llamada.
    Entender código orientado a objetos puede resultar un poco difícil cuando se ha programado en estructurada, ya que con POO se piensa de manera abstracta y sin pensar antes en detalles innecesarios como tipos de datos, funciones, procedimientos, etc.; algo diferente que en programación estructurada.
    A veces utilizar herencia no resulta adecuado para el tipo de problema, ya que muchos de ellos se pueden resolver de manera directa con programación estructurada, sin la necesidad de andar creando objectos ni buscando jerarquías de herencia.



En el paradigma orientado a objetos son pocas las desventajas con las que nos encontramos, pero de alguna manera siempre hay inconformidad; por ejemplo, una de las críticas que se han formulado es sobre como se enseña y por tanto como se aplica el paradigma orientado a Objetos. Algunas veces cuando tratamos con el Paradigma Orientado a Objetos se hace la analogía de que los objetos serían los sustantivos de una oración, mientras que los métodos serían los verbos de la misma, aquí es donde surge una inconformidad ya que verbo y el sustantivo son elementos independientes, pero un objeto y sus métodos nunca pueden existir de manera independiente el uno del otro. Como lo menciona Buko Obele :

Buko Obele, citado en 
“La palabra "persona" en una oración no depende de cualquier noción de un verbo en particular [...]. En la práctica nos nunca decimos que una persona que no puede, por ejemplo, "correr" no es una persona [... ].No existen en orientado a objetos conceptos de diseño separado y aparte de sus métodos en absoluto - en su lugar, el punto es que están estrictamente constituidos por sus métodos.”


Otra cosa criticada, es que las personas ocupamos el paradigma aplicando metáforas para visualizar y descomponer un problema, pero los inconformes argumentan que una metáfora sólo representa en cierta medida al sistema real y nunca de manera completa. Con lo anterior se observa que hay inconformidad no tanto con el Paradigma Orientado a Objetos, sino más bien con la forma en la que se enseña, ya que en estos tiempos la concepción e implementación de Orientado a Objetos difiere del paradigma que se tenía cuando se creó Smalltlak.

CONCLUSIONES

El paradigma en general ha sido de mucha ayuda para la ingeniería de Software, los métodos que ofrece son sencillos de comprender, ya que se basa en metáforas que normalmente hacemos, las características principales de la Programación Orientada a Objetos, son los mensajes que se envían entre las entidades que concebimos como objetos, las clases simplemente son los prototipos de unos objetos determinados, una cualidad importante de los objetos es su capacidad de ocultar su estado, siendo esto de mucha utilidad para evitar errores o poder solucionarlos de manera rápida.
Prácticamente el paradigma ofrece más ventajas que desventajas, siendo la desventaja más recalcable la de dificultad de entender (al inicio) el paradigma cuando recién se viene de crear bajo una programación estructurada.


